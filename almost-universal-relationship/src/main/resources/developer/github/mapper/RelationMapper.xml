<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="developer.github.mapper.RelationMapper">
  <resultMap id="BaseResultMap" type="developer.github.dao.model.RelationDaoModel">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="created_by_id" jdbcType="BIGINT" property="createdById" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_by_id" jdbcType="BIGINT" property="updatedById" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="object_id" jdbcType="BIGINT" property="objectId" />
    <result column="object_type" jdbcType="INTEGER" property="objectType" />
    <result column="related" jdbcType="VARCHAR" property="related" />
    <result column="related_type" jdbcType="INTEGER" property="relatedType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, created_by_id, created_at, updated_by_id, updated_at, version, status, object_id, 
    object_type, related, related_type
  </sql>
  <select id="selectByExample" parameterType="developer.github.dao.model.RelationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_relation
    where id = #{id,jdbcType=BIGINT}
  </select>

  <insert id="insert" parameterType="developer.github.dao.model.RelationDaoModel" useGeneratedKeys="true" keyProperty="id">
    insert into t_relation (id, created_by_id, created_at, 
      updated_by_id, updated_at, version, 
      status, object_id, object_type, 
      related, related_type)
    values (#{id,jdbcType=BIGINT}, #{createdById,jdbcType=BIGINT}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedById,jdbcType=BIGINT}, #{updatedAt,jdbcType=TIMESTAMP}, #{version,jdbcType=BIGINT}, 
      #{status,jdbcType=INTEGER}, #{objectId,jdbcType=BIGINT}, #{objectType,jdbcType=INTEGER}, 
      #{related,jdbcType=VARCHAR}, #{relatedType,jdbcType=INTEGER})
  </insert>

  <insert id="batchInsert" parameterType="list">
    insert into t_relation (id, created_by_id,
    created_at, updated_by_id, updated_at,
    object_id, object_type, related, related_type
    )
    values
    <foreach item="item" index="index" collection="list" open="" separator="," close="">
      (
      #{item.id,jdbcType=BIGINT},
      #{item.createdById,jdbcType=BIGINT},
      #{item.createdAt,jdbcType=TIMESTAMP},
      #{item.updatedById,jdbcType=BIGINT},
      #{item.updatedAt,jdbcType=TIMESTAMP},
      #{item.objectId,jdbcType=BIGINT},
      #{item.objectType,jdbcType=INTEGER},
      #{item.related,jdbcType=VARCHAR},
      #{item.relatedType,jdbcType=INTEGER}
      )
    </foreach>
  </insert>

  <insert id="batchInsertRemoveRelation" parameterType="list">
    insert into t_relation_remove (id, created_by_id,
    created_at, updated_by_id, updated_at,
    object_id, object_type, related, related_type
    )
    values
    <foreach item="item" index="index" collection="list" open="" separator="," close="">
      (
      #{item.id,jdbcType=BIGINT},
      #{item.createdById,jdbcType=BIGINT},
      #{item.createdAt,jdbcType=TIMESTAMP},
      #{item.updatedById,jdbcType=BIGINT},
      #{item.updatedAt,jdbcType=TIMESTAMP},
      #{item.objectId,jdbcType=BIGINT},
      #{item.objectType,jdbcType=INTEGER},
      #{item.related,jdbcType=VARCHAR},
      #{item.relatedType,jdbcType=INTEGER}
      )
    </foreach>
  </insert>

  <insert id="insertSelective" parameterType="developer.github.dao.model.RelationDaoModel" useGeneratedKeys="true" keyProperty="id">
    insert into t_relation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createdById != null">
        created_by_id,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedById != null">
        updated_by_id,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="objectId != null">
        object_id,
      </if>
      <if test="objectType != null">
        object_type,
      </if>
      <if test="related != null">
        related,
      </if>
      <if test="relatedType != null">
        related_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="createdById != null">
        #{createdById,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedById != null">
        #{updatedById,jdbcType=BIGINT},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="objectId != null">
        #{objectId,jdbcType=BIGINT},
      </if>
      <if test="objectType != null">
        #{objectType,jdbcType=INTEGER},
      </if>
      <if test="related != null">
        #{related,jdbcType=VARCHAR},
      </if>
      <if test="relatedType != null">
        #{relatedType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="developer.github.dao.model.RelationExample" resultType="java.lang.Integer">
    select count(*) from t_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_relation
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.createdById != null">
        created_by_id = #{record.createdById,jdbcType=BIGINT},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedById != null">
        updated_by_id = #{record.updatedById,jdbcType=BIGINT},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.objectId != null">
        object_id = #{record.objectId,jdbcType=BIGINT},
      </if>
      <if test="record.objectType != null">
        object_type = #{record.objectType,jdbcType=INTEGER},
      </if>
      <if test="record.related != null">
        related = #{record.related,jdbcType=VARCHAR},
      </if>
      <if test="record.relatedType != null">
        related_type = #{record.relatedType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_relation
    set id = #{record.id,jdbcType=BIGINT},
      created_by_id = #{record.createdById,jdbcType=BIGINT},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_by_id = #{record.updatedById,jdbcType=BIGINT},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=BIGINT},
      status = #{record.status,jdbcType=INTEGER},
      object_id = #{record.objectId,jdbcType=BIGINT},
      object_type = #{record.objectType,jdbcType=INTEGER},
      related = #{record.related,jdbcType=VARCHAR},
      related_type = #{record.relatedType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="developer.github.dao.model.RelationDaoModel">
    update t_relation
    <set>
      <if test="createdById != null">
        created_by_id = #{createdById,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedById != null">
        updated_by_id = #{updatedById,jdbcType=BIGINT},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="objectId != null">
        object_id = #{objectId,jdbcType=BIGINT},
      </if>
      <if test="objectType != null">
        object_type = #{objectType,jdbcType=INTEGER},
      </if>
      <if test="related != null">
        related = #{related,jdbcType=VARCHAR},
      </if>
      <if test="relatedType != null">
        related_type = #{relatedType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="developer.github.dao.model.RelationDaoModel">
    update t_relation
    set created_by_id = #{createdById,jdbcType=BIGINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_by_id = #{updatedById,jdbcType=BIGINT},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      object_id = #{objectId,jdbcType=BIGINT},
      object_type = #{objectType,jdbcType=INTEGER},
      related = #{related,jdbcType=VARCHAR},
      related_type = #{relatedType,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <delete id="deleteByExample" parameterType="developer.github.dao.model.RelationExample">
    delete from t_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

</mapper>